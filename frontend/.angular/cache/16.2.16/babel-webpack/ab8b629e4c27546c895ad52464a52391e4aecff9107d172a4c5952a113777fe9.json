{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TrackService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}tracks/`;\n  }\n  getTracks() {\n    return this.http.get(this.apiUrl);\n  }\n  createTrack(track) {\n    const formData = new FormData();\n    // Log what we're sending\n    console.log('Creating track with data:', track);\n    // Map artist and genre to artist_id and genre_id\n    const mappedData = {\n      ...track\n    };\n    // Add each field with better logging - correcting the field names\n    Object.keys(mappedData).forEach(key => {\n      if (mappedData[key] !== undefined && key !== 'audio_file') {\n        // Map the artist and genre fields to artist_id and genre_id\n        if (key === 'artist') {\n          console.log(`Adding field artist_id:`, mappedData[key]);\n          formData.append('artist_id', String(mappedData[key]));\n        } else if (key === 'genre') {\n          console.log(`Adding field genre_id:`, mappedData[key]);\n          formData.append('genre_id', String(mappedData[key]));\n        } else {\n          console.log(`Adding field ${key}:`, mappedData[key]);\n          formData.append(key, String(mappedData[key]));\n        }\n      }\n    });\n    // Handle file separately\n    if (track.audio_file && typeof track.audio_file !== 'string') {\n      const file = track.audio_file;\n      console.log('Adding audio file:', file.name, file.type, file.size);\n      formData.append('audio_file', file);\n    }\n    // Log the form data keys (can't iterate entries in all browsers)\n    console.log('FormData contains these keys:');\n    formData.forEach((value, key) => {\n      console.log(key, value);\n    });\n    return this.http.post(this.apiUrl, formData);\n  }\n  static {\n    this.ɵfac = function TrackService_Factory(t) {\n      return new (t || TrackService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TrackService,\n      factory: TrackService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","TrackService","constructor","http","apiUrl","getTracks","get","createTrack","track","formData","FormData","console","log","mappedData","Object","keys","forEach","key","undefined","append","String","audio_file","file","name","type","size","value","post","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\mdinm\\OneDrive\\Рабочий стол\\track_flow\\frontend\\src\\app\\services\\track.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { Track } from '../models/track.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TrackService {\n  private apiUrl = `${environment.apiUrl}tracks/`;\n\n  constructor(private http: HttpClient) { }\n\n  getTracks(): Observable<Track[]> {\n    return this.http.get<Track[]>(this.apiUrl);\n  }\n\n  createTrack(track: Track): Observable<Track> {\n    const formData = new FormData();\n    \n    // Log what we're sending\n    console.log('Creating track with data:', track);\n    \n    // Map artist and genre to artist_id and genre_id\n    const mappedData = { ...track };\n    \n    // Add each field with better logging - correcting the field names\n    Object.keys(mappedData).forEach(key => {\n      if (mappedData[key as keyof Track] !== undefined && key !== 'audio_file') {\n        // Map the artist and genre fields to artist_id and genre_id\n        if (key === 'artist') {\n          console.log(`Adding field artist_id:`, mappedData[key as keyof Track]);\n          formData.append('artist_id', String(mappedData[key as keyof Track]));\n        } \n        else if (key === 'genre') {\n          console.log(`Adding field genre_id:`, mappedData[key as keyof Track]);\n          formData.append('genre_id', String(mappedData[key as keyof Track]));\n        }\n        else {\n          console.log(`Adding field ${key}:`, mappedData[key as keyof Track]);\n          formData.append(key, String(mappedData[key as keyof Track]));\n        }\n      }\n    });\n    \n    // Handle file separately\n    if (track.audio_file && typeof track.audio_file !== 'string') {\n      const file = track.audio_file as unknown as File;\n      console.log('Adding audio file:', file.name, file.type, file.size);\n      formData.append('audio_file', file);\n    }\n    \n    // Log the form data keys (can't iterate entries in all browsers)\n    console.log('FormData contains these keys:');\n    formData.forEach((value, key) => {\n      console.log(key, value);\n    });\n    \n    return this.http.post<Track>(this.apiUrl, formData);\n  }\n} "],"mappings":"AAGA,SAASA,WAAW,QAAQ,gCAAgC;;;AAM5D,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,GAAGJ,WAAW,CAACI,MAAM,SAAS;EAEP;EAExCC,SAASA,CAAA;IACP,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAU,IAAI,CAACF,MAAM,CAAC;EAC5C;EAEAG,WAAWA,CAACC,KAAY;IACtB,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAE/B;IACAC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEJ,KAAK,CAAC;IAE/C;IACA,MAAMK,UAAU,GAAG;MAAE,GAAGL;IAAK,CAAE;IAE/B;IACAM,MAAM,CAACC,IAAI,CAACF,UAAU,CAAC,CAACG,OAAO,CAACC,GAAG,IAAG;MACpC,IAAIJ,UAAU,CAACI,GAAkB,CAAC,KAAKC,SAAS,IAAID,GAAG,KAAK,YAAY,EAAE;QACxE;QACA,IAAIA,GAAG,KAAK,QAAQ,EAAE;UACpBN,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEC,UAAU,CAACI,GAAkB,CAAC,CAAC;UACtER,QAAQ,CAACU,MAAM,CAAC,WAAW,EAAEC,MAAM,CAACP,UAAU,CAACI,GAAkB,CAAC,CAAC,CAAC;SACrE,MACI,IAAIA,GAAG,KAAK,OAAO,EAAE;UACxBN,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEC,UAAU,CAACI,GAAkB,CAAC,CAAC;UACrER,QAAQ,CAACU,MAAM,CAAC,UAAU,EAAEC,MAAM,CAACP,UAAU,CAACI,GAAkB,CAAC,CAAC,CAAC;SACpE,MACI;UACHN,OAAO,CAACC,GAAG,CAAC,gBAAgBK,GAAG,GAAG,EAAEJ,UAAU,CAACI,GAAkB,CAAC,CAAC;UACnER,QAAQ,CAACU,MAAM,CAACF,GAAG,EAAEG,MAAM,CAACP,UAAU,CAACI,GAAkB,CAAC,CAAC,CAAC;;;IAGlE,CAAC,CAAC;IAEF;IACA,IAAIT,KAAK,CAACa,UAAU,IAAI,OAAOb,KAAK,CAACa,UAAU,KAAK,QAAQ,EAAE;MAC5D,MAAMC,IAAI,GAAGd,KAAK,CAACa,UAA6B;MAChDV,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEU,IAAI,CAACC,IAAI,EAAED,IAAI,CAACE,IAAI,EAAEF,IAAI,CAACG,IAAI,CAAC;MAClEhB,QAAQ,CAACU,MAAM,CAAC,YAAY,EAAEG,IAAI,CAAC;;IAGrC;IACAX,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC5CH,QAAQ,CAACO,OAAO,CAAC,CAACU,KAAK,EAAET,GAAG,KAAI;MAC9BN,OAAO,CAACC,GAAG,CAACK,GAAG,EAAES,KAAK,CAAC;IACzB,CAAC,CAAC;IAEF,OAAO,IAAI,CAACvB,IAAI,CAACwB,IAAI,CAAQ,IAAI,CAACvB,MAAM,EAAEK,QAAQ,CAAC;EACrD;;;uBAnDWR,YAAY,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAZ9B,YAAY;MAAA+B,OAAA,EAAZ/B,YAAY,CAAAgC,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}