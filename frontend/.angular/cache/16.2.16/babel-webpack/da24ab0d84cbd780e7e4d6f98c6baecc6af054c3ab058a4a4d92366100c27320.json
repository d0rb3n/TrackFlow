{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.apiUrl;\n    const storedUser = localStorage.getItem('currentUser');\n    this.currentUserSubject = new BehaviorSubject(storedUser ? JSON.parse(storedUser) : null);\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n  get currentUserValue() {\n    return this.currentUserSubject.value;\n  }\n  login(username, password) {\n    return this.http.post(`${this.apiUrl}login/`, {\n      username,\n      password\n    }).pipe(map(response => {\n      if (response && response.access) {\n        localStorage.setItem('access_token', response.access);\n        localStorage.setItem('refresh_token', response.refresh);\n        localStorage.setItem('currentUser', JSON.stringify(response.user));\n        this.currentUserSubject.next(response.user);\n      }\n      return response;\n    }));\n  }\n  logout() {\n    const refreshToken = localStorage.getItem('refresh_token');\n    return this.http.post(`${this.apiUrl}logout/`, {\n      refresh_token: refreshToken\n    }).pipe(map(() => {\n      this.clearLocalStorage();\n    }));\n  }\n  clearLocalStorage() {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n  }\n  refreshToken() {\n    const refreshToken = localStorage.getItem('refresh_token');\n    return this.http.post(`${this.apiUrl}login/refresh/`, {\n      refresh: refreshToken\n    });\n  }\n  isLoggedIn() {\n    return !!localStorage.getItem('access_token');\n  }\n  getToken() {\n    return localStorage.getItem('access_token');\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","map","environment","AuthService","constructor","http","apiUrl","storedUser","localStorage","getItem","currentUserSubject","JSON","parse","currentUser","asObservable","currentUserValue","value","login","username","password","post","pipe","response","access","setItem","refresh","stringify","user","next","logout","refreshToken","refresh_token","clearLocalStorage","removeItem","isLoggedIn","getToken","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\track_flow\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport { User } from '../models/user.model';\n\ninterface AuthResponse {\n  access: string;\n  refresh: string;\n  user: User;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private currentUserSubject: BehaviorSubject<User | null>;\n  public currentUser: Observable<User | null>;\n  private apiUrl = environment.apiUrl;\n\n  constructor(private http: HttpClient) {\n    const storedUser = localStorage.getItem('currentUser');\n    this.currentUserSubject = new BehaviorSubject<User | null>(storedUser ? JSON.parse(storedUser) : null);\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n\n  public get currentUserValue(): User | null {\n    return this.currentUserSubject.value;\n  }\n\n  login(username: string, password: string): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}login/`, { username, password })\n      .pipe(map(response => {\n        if (response && response.access) {\n          localStorage.setItem('access_token', response.access);\n          localStorage.setItem('refresh_token', response.refresh);\n          localStorage.setItem('currentUser', JSON.stringify(response.user));\n          this.currentUserSubject.next(response.user);\n        }\n        return response;\n      }));\n  }\n\n  logout(): Observable<any> {\n    const refreshToken = localStorage.getItem('refresh_token');\n    return this.http.post<any>(`${this.apiUrl}logout/`, { refresh_token: refreshToken })\n      .pipe(map(() => {\n        this.clearLocalStorage();\n      }));\n  }\n\n  clearLocalStorage(): void {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n  }\n\n  refreshToken(): Observable<{ access: string }> {\n    const refreshToken = localStorage.getItem('refresh_token');\n    return this.http.post<{ access: string }>(`${this.apiUrl}login/refresh/`, { refresh: refreshToken });\n  }\n\n  isLoggedIn(): boolean {\n    return !!localStorage.getItem('access_token');\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('access_token');\n  }\n} "],"mappings":"AAEA,SAAqBA,eAAe,QAAQ,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;AACpC,SAASC,WAAW,QAAQ,gCAAgC;;;AAY5D,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAGJ,WAAW,CAACI,MAAM;IAGjC,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACtD,IAAI,CAACC,kBAAkB,GAAG,IAAIV,eAAe,CAAcO,UAAU,GAAGI,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC,GAAG,IAAI,CAAC;IACtG,IAAI,CAACM,WAAW,GAAG,IAAI,CAACH,kBAAkB,CAACI,YAAY,EAAE;EAC3D;EAEA,IAAWC,gBAAgBA,CAAA;IACzB,OAAO,IAAI,CAACL,kBAAkB,CAACM,KAAK;EACtC;EAEAC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACd,IAAI,CAACe,IAAI,CAAe,GAAG,IAAI,CAACd,MAAM,QAAQ,EAAE;MAAEY,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CAChFE,IAAI,CAACpB,GAAG,CAACqB,QAAQ,IAAG;MACnB,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,MAAM,EAAE;QAC/Bf,YAAY,CAACgB,OAAO,CAAC,cAAc,EAAEF,QAAQ,CAACC,MAAM,CAAC;QACrDf,YAAY,CAACgB,OAAO,CAAC,eAAe,EAAEF,QAAQ,CAACG,OAAO,CAAC;QACvDjB,YAAY,CAACgB,OAAO,CAAC,aAAa,EAAEb,IAAI,CAACe,SAAS,CAACJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClE,IAAI,CAACjB,kBAAkB,CAACkB,IAAI,CAACN,QAAQ,CAACK,IAAI,CAAC;;MAE7C,OAAOL,QAAQ;IACjB,CAAC,CAAC,CAAC;EACP;EAEAO,MAAMA,CAAA;IACJ,MAAMC,YAAY,GAAGtB,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IAC1D,OAAO,IAAI,CAACJ,IAAI,CAACe,IAAI,CAAM,GAAG,IAAI,CAACd,MAAM,SAAS,EAAE;MAAEyB,aAAa,EAAED;IAAY,CAAE,CAAC,CACjFT,IAAI,CAACpB,GAAG,CAAC,MAAK;MACb,IAAI,CAAC+B,iBAAiB,EAAE;IAC1B,CAAC,CAAC,CAAC;EACP;EAEAA,iBAAiBA,CAAA;IACfxB,YAAY,CAACyB,UAAU,CAAC,cAAc,CAAC;IACvCzB,YAAY,CAACyB,UAAU,CAAC,eAAe,CAAC;IACxCzB,YAAY,CAACyB,UAAU,CAAC,aAAa,CAAC;IACtC,IAAI,CAACvB,kBAAkB,CAACkB,IAAI,CAAC,IAAI,CAAC;EACpC;EAEAE,YAAYA,CAAA;IACV,MAAMA,YAAY,GAAGtB,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IAC1D,OAAO,IAAI,CAACJ,IAAI,CAACe,IAAI,CAAqB,GAAG,IAAI,CAACd,MAAM,gBAAgB,EAAE;MAAEmB,OAAO,EAAEK;IAAY,CAAE,CAAC;EACtG;EAEAI,UAAUA,CAAA;IACR,OAAO,CAAC,CAAC1B,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAC/C;EAEA0B,QAAQA,CAAA;IACN,OAAO3B,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAC7C;;;uBAtDWN,WAAW,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXpC,WAAW;MAAAqC,OAAA,EAAXrC,WAAW,CAAAsC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}